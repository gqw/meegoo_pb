// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto
// Protobuf C++ Version: 6.31.0-dev

#include "test.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace pb {

inline constexpr Test3::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : vec_{},
        _vec_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Test3::Test3(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Test3_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Test3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Test3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Test3DefaultTypeInternal() {}
  union {
    Test3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Test3DefaultTypeInternal _Test3_default_instance_;

inline constexpr Test2::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        si64_{::int64_t{0}},
        u32_{0u},
        i32_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Test2::Test2(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Test2_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Test2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Test2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Test2DefaultTypeInternal() {}
  union {
    Test2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Test2DefaultTypeInternal _Test2_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Test_MpEntry_DoNotUse::Test_MpEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : Test_MpEntry_DoNotUse::MapEntry(Test_MpEntry_DoNotUse_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : Test_MpEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Test_MpEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Test_MpEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Test_MpEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Test_MpEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Test_MpEntry_DoNotUseDefaultTypeInternal _Test_MpEntry_DoNotUse_default_instance_;

inline constexpr SubTest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        i32_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubTest::SubTest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SubTest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SubTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubTestDefaultTypeInternal() {}
  union {
    SubTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubTestDefaultTypeInternal _SubTest_default_instance_;

inline constexpr Test::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vec_{},
        _vec_cached_byte_size_{0},
        mp_{},
        str_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bs_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        test_{nullptr},
        gqw_any_{nullptr},
        i64_{::int64_t{0}},
        i32_{0},
        u32_{0u},
        u64_{::uint64_t{0u}},
        si64_{::int64_t{0}},
        si32_{0},
        fx32_{0u},
        fx64_{::uint64_t{0u}},
        sfx64_{::int64_t{0}},
        sfx32_{0},
        bl_{false},
        d64_{0},
        f32_{0},
        object_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Test::Test(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Test_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDefaultTypeInternal() {}
  union {
    Test _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDefaultTypeInternal _Test_default_instance_;
}  // namespace pb
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_test_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_test_2eproto = nullptr;
const ::uint32_t
    TableStruct_test_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::pb::SubTest, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::pb::SubTest, _impl_.i32_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::pb::Test_MpEntry_DoNotUse, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::pb::Test_MpEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::pb::Test_MpEntry_DoNotUse, _impl_.value_),
        0,
        1,
        0x085, // bitmap
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_._oneof_case_[0]),
        26, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.i32_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.i64_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.u32_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.u64_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.si32_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.si64_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.fx32_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.fx64_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.sfx32_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.sfx64_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.bl_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.f32_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.d64_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.str_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.bs_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.vec_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.mp_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.test_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.gqw_any_),
        PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_.object_),
        5,
        4,
        6,
        7,
        9,
        8,
        10,
        11,
        13,
        12,
        14,
        16,
        15,
        0,
        1,
        ~0u,
        ~0u,
        2,
        ~0u,
        ~0u,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::pb::Test2, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::pb::Test2, _impl_.i32_),
        PROTOBUF_FIELD_OFFSET(::pb::Test2, _impl_.u32_),
        PROTOBUF_FIELD_OFFSET(::pb::Test2, _impl_.si64_),
        2,
        1,
        0,
        0x000, // bitmap
        PROTOBUF_FIELD_OFFSET(::pb::Test3, _impl_.vec_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::pb::SubTest)},
        {5, sizeof(::pb::Test_MpEntry_DoNotUse)},
        {12, sizeof(::pb::Test)},
        {59, sizeof(::pb::Test2)},
        {68, sizeof(::pb::Test3)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::pb::_SubTest_default_instance_._instance,
    &::pb::_Test_MpEntry_DoNotUse_default_instance_._instance,
    &::pb::_Test_default_instance_._instance,
    &::pb::_Test2_default_instance_._instance,
    &::pb::_Test3_default_instance_._instance,
};
const char descriptor_table_protodef_test_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\ntest.proto\022\002pb\032\031google/protobuf/any.pr"
    "oto\"\026\n\007SubTest\022\013\n\003i32\030\001 \001(\005\"\227\003\n\004Test\022\013\n\003"
    "i32\030\001 \001(\005\022\013\n\003i64\030\002 \001(\003\022\013\n\003u32\030\003 \001(\r\022\013\n\003u"
    "64\030\004 \001(\004\022\014\n\004si32\030\005 \001(\021\022\014\n\004si64\030\006 \001(\022\022\014\n\004"
    "fx32\030\007 \001(\007\022\014\n\004fx64\030\010 \001(\006\022\r\n\005sfx32\030\t \001(\017\022"
    "\r\n\005sfx64\030\n \001(\020\022\n\n\002bl\030\013 \001(\010\022\013\n\003f32\030\014 \001(\002\022"
    "\013\n\003d64\030\r \001(\001\022\013\n\003str\030\016 \001(\t\022\n\n\002bs\030\017 \001(\014\022\013\n"
    "\003vec\030\020 \003(\005\022\034\n\002mp\030\021 \003(\0132\020.pb.Test.MpEntry"
    "\022\031\n\004test\030\022 \001(\0132\013.pb.SubTest\022\021\n\007obj_f32\030\023"
    " \001(\002H\000\022\021\n\007obj_str\030\024 \001(\tH\000\022%\n\007gqw_any\030\025 \001"
    "(\0132\024.google.protobuf.Any\032)\n\007MpEntry\022\013\n\003k"
    "ey\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001B\010\n\006object\"0\n"
    "\005Test2\022\014\n\003i32\030\3306 \001(\005\022\013\n\003u32\030\003 \001(\r\022\014\n\004si6"
    "4\030\006 \001(\022\"\024\n\005Test3\022\013\n\003vec\030\001 \003(\005b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_test_2eproto_deps[1] = {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_test_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_test_2eproto = {
    false,
    false,
    557,
    descriptor_table_protodef_test_2eproto,
    "test.proto",
    &descriptor_table_test_2eproto_once,
    descriptor_table_test_2eproto_deps,
    1,
    5,
    schemas,
    file_default_instances,
    TableStruct_test_2eproto::offsets,
    file_level_enum_descriptors_test_2eproto,
    file_level_service_descriptors_test_2eproto,
};
namespace pb {
// ===================================================================

class SubTest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SubTest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SubTest, _impl_._has_bits_);
};

SubTest::SubTest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubTest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SubTest)
}
SubTest::SubTest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SubTest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubTest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE SubTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SubTest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.i32_ = {};
}
SubTest::~SubTest() {
  // @@protoc_insertion_point(destructor:pb.SubTest)
  SharedDtor(*this);
}
inline void SubTest::SharedDtor(MessageLite& self) {
  SubTest& this_ = static_cast<SubTest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SubTest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SubTest(arena);
}
constexpr auto SubTest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SubTest),
                                            alignof(SubTest));
}
constexpr auto SubTest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SubTest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SubTest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SubTest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SubTest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SubTest>(), &SubTest::ByteSizeLong,
              &SubTest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SubTest, _impl_._cached_size_),
          false,
      },
      &SubTest::kDescriptorMethods,
      &descriptor_table_test_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SubTest_class_data_ =
            SubTest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SubTest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SubTest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SubTest_class_data_.tc_table);
  return SubTest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2>
SubTest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SubTest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SubTest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::pb::SubTest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 i32 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SubTest, _impl_.i32_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(SubTest, _impl_.i32_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 i32 = 1;
    {PROTOBUF_FIELD_OFFSET(SubTest, _impl_.i32_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void SubTest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SubTest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.i32_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SubTest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SubTest& this_ = static_cast<const SubTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SubTest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SubTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:pb.SubTest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 i32 = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_i32() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_i32(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SubTest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SubTest::ByteSizeLong(const MessageLite& base) {
  const SubTest& this_ = static_cast<const SubTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SubTest::ByteSizeLong() const {
  const SubTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:pb.SubTest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // int32 i32 = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_i32() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_i32());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SubTest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SubTest*>(&to_msg);
  auto& from = static_cast<const SubTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.SubTest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (from._internal_i32() != 0) {
      _this->_impl_.i32_ = from._impl_.i32_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubTest::CopyFrom(const SubTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SubTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SubTest::InternalSwap(SubTest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.i32_, other->_impl_.i32_);
}

::google::protobuf::Metadata SubTest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
Test_MpEntry_DoNotUse::Test_MpEntry_DoNotUse()
    : SuperType(Test_MpEntry_DoNotUse_class_data_.base()) {}
Test_MpEntry_DoNotUse::Test_MpEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : SuperType(arena, Test_MpEntry_DoNotUse_class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
Test_MpEntry_DoNotUse::Test_MpEntry_DoNotUse() : SuperType() {}
Test_MpEntry_DoNotUse::Test_MpEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
inline void* PROTOBUF_NONNULL Test_MpEntry_DoNotUse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Test_MpEntry_DoNotUse(arena);
}
constexpr auto Test_MpEntry_DoNotUse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Test_MpEntry_DoNotUse),
                                            alignof(Test_MpEntry_DoNotUse));
}
constexpr auto Test_MpEntry_DoNotUse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Test_MpEntry_DoNotUse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Test_MpEntry_DoNotUse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Test_MpEntry_DoNotUse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Test_MpEntry_DoNotUse::SharedDtor,
          static_cast<void (::google::protobuf::MessageLite::*)()>(&Test_MpEntry_DoNotUse::ClearImpl),
              ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
              ,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Test_MpEntry_DoNotUse, _impl_._cached_size_),
          false,
      },
      &Test_MpEntry_DoNotUse::kDescriptorMethods,
      &descriptor_table_test_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Test_MpEntry_DoNotUse_class_data_ =
            Test_MpEntry_DoNotUse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL Test_MpEntry_DoNotUse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Test_MpEntry_DoNotUse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Test_MpEntry_DoNotUse_class_data_.tc_table);
  return Test_MpEntry_DoNotUse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2>
Test_MpEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Test_MpEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Test_MpEntry_DoNotUse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::pb::Test_MpEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Test_MpEntry_DoNotUse, _impl_.value_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Test_MpEntry_DoNotUse, _impl_.value_)}},
    // int32 key = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Test_MpEntry_DoNotUse, _impl_.key_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Test_MpEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 key = 1;
    {PROTOBUF_FIELD_OFFSET(Test_MpEntry_DoNotUse, _impl_.key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(Test_MpEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};
// ===================================================================

class Test::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Test>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Test, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::pb::Test, _impl_._oneof_case_);
};

void Test::clear_gqw_any() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gqw_any_ != nullptr) _impl_.gqw_any_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Test::Test(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Test_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Test)
}
PROTOBUF_NDEBUG_INLINE Test::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::pb::Test& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        vec_{visibility, arena, from.vec_},
        _vec_cached_byte_size_{0},
        mp_{visibility, arena, from.mp_},
        str_(arena, from.str_),
        bs_(arena, from.bs_),
        object_{},
        _oneof_case_{from._oneof_case_[0]} {}

Test::Test(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Test& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Test_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Test* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.test_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.test_)
                : nullptr;
  _impl_.gqw_any_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.gqw_any_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, i64_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, i64_),
           offsetof(Impl_, f32_) -
               offsetof(Impl_, i64_) +
               sizeof(Impl_::f32_));
  switch (object_case()) {
    case OBJECT_NOT_SET:
      break;
      case kObjF32:
        _impl_.object_.obj_f32_ = from._impl_.object_.obj_f32_;
        break;
      case kObjStr:
        new (&_impl_.object_.obj_str_) decltype(_impl_.object_.obj_str_){arena, from._impl_.object_.obj_str_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:pb.Test)
}
PROTOBUF_NDEBUG_INLINE Test::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        vec_{visibility, arena},
        _vec_cached_byte_size_{0},
        mp_{visibility, arena},
        str_(arena),
        bs_(arena),
        object_{},
        _oneof_case_{} {}

inline void Test::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, test_),
           0,
           offsetof(Impl_, f32_) -
               offsetof(Impl_, test_) +
               sizeof(Impl_::f32_));
}
Test::~Test() {
  // @@protoc_insertion_point(destructor:pb.Test)
  SharedDtor(*this);
}
inline void Test::SharedDtor(MessageLite& self) {
  Test& this_ = static_cast<Test&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.str_.Destroy();
  this_._impl_.bs_.Destroy();
  delete this_._impl_.test_;
  delete this_._impl_.gqw_any_;
  if (this_.has_object()) {
    this_.clear_object();
  }
  this_._impl_.~Impl_();
}

void Test::clear_object() {
// @@protoc_insertion_point(one_of_clear_start:pb.Test)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (object_case()) {
    case kObjF32: {
      // No need to clear
      break;
    }
    case kObjStr: {
      _impl_.object_.obj_str_.Destroy();
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OBJECT_NOT_SET;
}


inline void* PROTOBUF_NONNULL Test::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Test(arena);
}
constexpr auto Test::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Test, _impl_.vec_) +
          decltype(Test::_impl_.vec_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Test, _impl_.mp_) +
          decltype(Test::_impl_.mp_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Test, _impl_.mp_) +
          decltype(Test::_impl_.mp_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Test), alignof(Test), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Test::PlacementNew_,
                                 sizeof(Test),
                                 alignof(Test));
  }
}
constexpr auto Test::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Test_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Test::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Test>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Test::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Test>(), &Test::ByteSizeLong,
              &Test::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Test, _impl_._cached_size_),
          false,
      },
      &Test::kDescriptorMethods,
      &descriptor_table_test_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Test_class_data_ =
            Test::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL Test::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Test_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Test_class_data_.tc_table);
  return Test_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 3, 42, 2>
Test::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Test, _impl_._has_bits_),
    0, // no _extensions_
    21, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292870144,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Test_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::pb::Test>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 i32 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Test, _impl_.i32_), 5>(),
     {8, 5, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.i32_)}},
    // int64 i64 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Test, _impl_.i64_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.i64_)}},
    // uint32 u32 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Test, _impl_.u32_), 6>(),
     {24, 6, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.u32_)}},
    // uint64 u64 = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Test, _impl_.u64_), 7>(),
     {32, 7, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.u64_)}},
    // sint32 si32 = 5;
    {::_pbi::TcParser::FastZ32S1,
     {40, 9, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.si32_)}},
    // sint64 si64 = 6;
    {::_pbi::TcParser::FastZ64S1,
     {48, 8, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.si64_)}},
    // fixed32 fx32 = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 10, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.fx32_)}},
    // fixed64 fx64 = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 11, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.fx64_)}},
    // sfixed32 sfx32 = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 13, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.sfx32_)}},
    // sfixed64 sfx64 = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 12, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.sfx64_)}},
    // bool bl = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Test, _impl_.bl_), 14>(),
     {88, 14, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.bl_)}},
    // float f32 = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 16, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.f32_)}},
    // double d64 = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 15, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.d64_)}},
    // string str = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 0, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.str_)}},
    // bytes bs = 15;
    {::_pbi::TcParser::FastBS1,
     {122, 1, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.bs_)}},
    // repeated int32 vec = 16;
    {::_pbi::TcParser::FastV32P2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.vec_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .pb.SubTest test = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 2, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.test_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Any gqw_any = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 3, 1, PROTOBUF_FIELD_OFFSET(Test, _impl_.gqw_any_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 i32 = 1;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.i32_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int64 i64 = 2;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.i64_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // uint32 u32 = 3;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.u32_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint64 u64 = 4;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.u64_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // sint32 si32 = 5;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.si32_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kSInt32)},
    // sint64 si64 = 6;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.si64_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kSInt64)},
    // fixed32 fx32 = 7;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.fx32_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // fixed64 fx64 = 8;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.fx64_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // sfixed32 sfx32 = 9;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.sfx32_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kSFixed32)},
    // sfixed64 sfx64 = 10;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.sfx64_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kSFixed64)},
    // bool bl = 11;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.bl_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // float f32 = 12;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.f32_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // double d64 = 13;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.d64_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // string str = 14;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.str_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes bs = 15;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.bs_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated int32 vec = 16;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.vec_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // map<int32, int32> mp = 17;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.mp_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // .pb.SubTest test = 18;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.test_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float obj_f32 = 19;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.object_.obj_f32_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kFloat)},
    // string obj_str = 20;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.object_.obj_str_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Any gqw_any = 21;
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.gqw_any_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::pb::SubTest>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
      {::_pbi::TcParser::GetMapAuxInfo(0, 0, 0,
                                       5, 5,
                                       0)},
  }},
  {{
    "\7\0\0\0\0\0\0\0\0\0\0\0\0\0\3\0\0\0\0\0\7\0\0\0"
    "pb.Test"
    "str"
    "obj_str"
  }},
};
PROTOBUF_NOINLINE void Test::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Test)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vec_.Clear();
  _impl_.mp_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.str_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.bs_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.test_ != nullptr);
      _impl_.test_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.gqw_any_ != nullptr);
      _impl_.gqw_any_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000f0u) != 0) {
    ::memset(&_impl_.i64_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.u64_) -
        reinterpret_cast<char*>(&_impl_.i64_)) + sizeof(_impl_.u64_));
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    ::memset(&_impl_.si64_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.d64_) -
        reinterpret_cast<char*>(&_impl_.si64_)) + sizeof(_impl_.d64_));
  }
  _impl_.f32_ = 0;
  clear_object();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Test::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Test& this_ = static_cast<const Test&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Test::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Test& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:pb.Test)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 i32 = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_i32() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_i32(), target);
    }
  }

  // int64 i64 = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_i64() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_i64(), target);
    }
  }

  // uint32 u32 = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_u32() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_u32(), target);
    }
  }

  // uint64 u64 = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_u64() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          4, this_._internal_u64(), target);
    }
  }

  // sint32 si32 = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000200u) != 0) {
    if (this_._internal_si32() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
          5, this_._internal_si32(), target);
    }
  }

  // sint64 si64 = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_si64() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
          6, this_._internal_si64(), target);
    }
  }

  // fixed32 fx32 = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000400u) != 0) {
    if (this_._internal_fx32() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
          7, this_._internal_fx32(), target);
    }
  }

  // fixed64 fx64 = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000800u) != 0) {
    if (this_._internal_fx64() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
          8, this_._internal_fx64(), target);
    }
  }

  // sfixed32 sfx32 = 9;
  if ((this_._impl_._has_bits_[0] & 0x00002000u) != 0) {
    if (this_._internal_sfx32() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(
          9, this_._internal_sfx32(), target);
    }
  }

  // sfixed64 sfx64 = 10;
  if ((this_._impl_._has_bits_[0] & 0x00001000u) != 0) {
    if (this_._internal_sfx64() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
          10, this_._internal_sfx64(), target);
    }
  }

  // bool bl = 11;
  if ((this_._impl_._has_bits_[0] & 0x00004000u) != 0) {
    if (this_._internal_bl() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          11, this_._internal_bl(), target);
    }
  }

  // float f32 = 12;
  if ((this_._impl_._has_bits_[0] & 0x00010000u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_f32()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          12, this_._internal_f32(), target);
    }
  }

  // double d64 = 13;
  if ((this_._impl_._has_bits_[0] & 0x00008000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_d64()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          13, this_._internal_d64(), target);
    }
  }

  // string str = 14;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_str().empty()) {
      const std::string& _s = this_._internal_str();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "pb.Test.str");
      target = stream->WriteStringMaybeAliased(14, _s, target);
    }
  }

  // bytes bs = 15;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_bs().empty()) {
      const std::string& _s = this_._internal_bs();
      target = stream->WriteBytesMaybeAliased(15, _s, target);
    }
  }

  // repeated int32 vec = 16;
  {
    int byte_size = this_._impl_._vec_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          16, this_._internal_vec(), byte_size, target);
    }
  }

  // map<int32, int32> mp = 17;
  if (!this_._internal_mp().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = this_._internal_mp();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            17, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            17, entry.first, entry.second, target, stream);
      }
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .pb.SubTest test = 18;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        18, *this_._impl_.test_, this_._impl_.test_->GetCachedSize(), target,
        stream);
  }

  switch (this_.object_case()) {
    case kObjF32: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          19, this_._internal_obj_f32(), target);
      break;
    }
    case kObjStr: {
      const std::string& _s = this_._internal_obj_str();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "pb.Test.obj_str");
      target = stream->WriteStringMaybeAliased(20, _s, target);
      break;
    }
    default:
      break;
  }
  // .google.protobuf.Any gqw_any = 21;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, *this_._impl_.gqw_any_, this_._impl_.gqw_any_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Test)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Test::ByteSizeLong(const MessageLite& base) {
  const Test& this_ = static_cast<const Test&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Test::ByteSizeLong() const {
  const Test& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:pb.Test)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated int32 vec = 16;
    {
      total_size +=
          ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
              this_._internal_vec(), 2,
              this_._impl_._vec_cached_byte_size_);
    }
    // map<int32, int32> mp = 17;
    {
      total_size +=
          2 * ::google::protobuf::internal::FromIntSize(this_._internal_mp_size());
      for (const auto& entry : this_._internal_mp()) {
        total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                       _pbi::WireFormatLite::TYPE_INT32,
                                       _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string str = 14;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_str().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_str());
      }
    }
    // bytes bs = 15;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_bs().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_bs());
      }
    }
    // .pb.SubTest test = 18;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.test_);
    }
    // .google.protobuf.Any gqw_any = 21;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.gqw_any_);
    }
    // int64 i64 = 2;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_i64() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_i64());
      }
    }
    // int32 i32 = 1;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_i32() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_i32());
      }
    }
    // uint32 u32 = 3;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_u32() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_u32());
      }
    }
    // uint64 u64 = 4;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_u64() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_u64());
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    // sint64 si64 = 6;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_si64() != 0) {
        total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
            this_._internal_si64());
      }
    }
    // sint32 si32 = 5;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_si32() != 0) {
        total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
            this_._internal_si32());
      }
    }
    // fixed32 fx32 = 7;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_fx32() != 0) {
        total_size += 5;
      }
    }
    // fixed64 fx64 = 8;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_fx64() != 0) {
        total_size += 9;
      }
    }
    // sfixed64 sfx64 = 10;
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (this_._internal_sfx64() != 0) {
        total_size += 9;
      }
    }
    // sfixed32 sfx32 = 9;
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (this_._internal_sfx32() != 0) {
        total_size += 5;
      }
    }
    // bool bl = 11;
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (this_._internal_bl() != 0) {
        total_size += 2;
      }
    }
    // double d64 = 13;
    if ((cached_has_bits & 0x00008000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_d64()) != 0) {
        total_size += 9;
      }
    }
  }
   {
    // float f32 = 12;
    if ((cached_has_bits & 0x00010000u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_f32()) != 0) {
        total_size += 5;
      }
    }
  }
  switch (this_.object_case()) {
    // float obj_f32 = 19;
    case kObjF32: {
      total_size += 6;
      break;
    }
    // string obj_str = 20;
    case kObjStr: {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_obj_str());
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Test::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Test*>(&to_msg);
  auto& from = static_cast<const Test&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Test)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vec()->MergeFrom(from._internal_vec());
  _this->_impl_.mp_.MergeFrom(from._impl_.mp_);
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_str().empty()) {
        _this->_internal_set_str(from._internal_str());
      } else {
        if (_this->_impl_.str_.IsDefault()) {
          _this->_internal_set_str("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_bs().empty()) {
        _this->_internal_set_bs(from._internal_bs());
      } else {
        if (_this->_impl_.bs_.IsDefault()) {
          _this->_internal_set_bs("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.test_ != nullptr);
      if (_this->_impl_.test_ == nullptr) {
        _this->_impl_.test_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.test_);
      } else {
        _this->_impl_.test_->MergeFrom(*from._impl_.test_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.gqw_any_ != nullptr);
      if (_this->_impl_.gqw_any_ == nullptr) {
        _this->_impl_.gqw_any_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.gqw_any_);
      } else {
        _this->_impl_.gqw_any_->MergeFrom(*from._impl_.gqw_any_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_i64() != 0) {
        _this->_impl_.i64_ = from._impl_.i64_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_i32() != 0) {
        _this->_impl_.i32_ = from._impl_.i32_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_u32() != 0) {
        _this->_impl_.u32_ = from._impl_.u32_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_u64() != 0) {
        _this->_impl_.u64_ = from._impl_.u64_;
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (from._internal_si64() != 0) {
        _this->_impl_.si64_ = from._impl_.si64_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_si32() != 0) {
        _this->_impl_.si32_ = from._impl_.si32_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_fx32() != 0) {
        _this->_impl_.fx32_ = from._impl_.fx32_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_fx64() != 0) {
        _this->_impl_.fx64_ = from._impl_.fx64_;
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (from._internal_sfx64() != 0) {
        _this->_impl_.sfx64_ = from._impl_.sfx64_;
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (from._internal_sfx32() != 0) {
        _this->_impl_.sfx32_ = from._impl_.sfx32_;
      }
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (from._internal_bl() != 0) {
        _this->_impl_.bl_ = from._impl_.bl_;
      }
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_d64()) != 0) {
        _this->_impl_.d64_ = from._impl_.d64_;
      }
    }
  }
  if ((cached_has_bits & 0x00010000u) != 0) {
    if (::absl::bit_cast<::uint32_t>(from._internal_f32()) != 0) {
      _this->_impl_.f32_ = from._impl_.f32_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_object();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kObjF32: {
        _this->_impl_.object_.obj_f32_ = from._impl_.object_.obj_f32_;
        break;
      }
      case kObjStr: {
        if (oneof_needs_init) {
          _this->_impl_.object_.obj_str_.InitDefault();
        }
        _this->_impl_.object_.obj_str_.Set(from._internal_obj_str(), arena);
        break;
      }
      case OBJECT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Test::CopyFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Test::InternalSwap(Test* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vec_.InternalSwap(&other->_impl_.vec_);
  _impl_.mp_.InternalSwap(&other->_impl_.mp_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.str_, &other->_impl_.str_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bs_, &other->_impl_.bs_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Test, _impl_.f32_)
      + sizeof(Test::_impl_.f32_)
      - PROTOBUF_FIELD_OFFSET(Test, _impl_.test_)>(
          reinterpret_cast<char*>(&_impl_.test_),
          reinterpret_cast<char*>(&other->_impl_.test_));
  swap(_impl_.object_, other->_impl_.object_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Test::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Test2::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Test2>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Test2, _impl_._has_bits_);
};

Test2::Test2(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Test2_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Test2)
}
Test2::Test2(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Test2& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Test2_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE Test2::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Test2::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, si64_),
           0,
           offsetof(Impl_, i32_) -
               offsetof(Impl_, si64_) +
               sizeof(Impl_::i32_));
}
Test2::~Test2() {
  // @@protoc_insertion_point(destructor:pb.Test2)
  SharedDtor(*this);
}
inline void Test2::SharedDtor(MessageLite& self) {
  Test2& this_ = static_cast<Test2&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Test2::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Test2(arena);
}
constexpr auto Test2::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Test2),
                                            alignof(Test2));
}
constexpr auto Test2::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Test2_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Test2::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Test2>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Test2::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Test2>(), &Test2::ByteSizeLong,
              &Test2::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Test2, _impl_._cached_size_),
          false,
      },
      &Test2::kDescriptorMethods,
      &descriptor_table_test_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Test2_class_data_ =
            Test2::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL Test2::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Test2_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Test2_class_data_.tc_table);
  return Test2_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 3, 0, 0, 7>
Test2::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Test2, _impl_._has_bits_),
    0, // no _extensions_
    7000, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967259,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Test2_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::pb::Test2>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // sint64 si64 = 6;
    {::_pbi::TcParser::FastZ64S1,
     {48, 0, 0, PROTOBUF_FIELD_OFFSET(Test2, _impl_.si64_)}},
    // uint32 u32 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Test2, _impl_.u32_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(Test2, _impl_.u32_)}},
  }}, {{
    7000, 0, 1,
    65534, 2,
    65535, 65535
  }}, {{
    // uint32 u32 = 3;
    {PROTOBUF_FIELD_OFFSET(Test2, _impl_.u32_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // sint64 si64 = 6;
    {PROTOBUF_FIELD_OFFSET(Test2, _impl_.si64_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kSInt64)},
    // int32 i32 = 7000;
    {PROTOBUF_FIELD_OFFSET(Test2, _impl_.i32_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Test2::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Test2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    ::memset(&_impl_.si64_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.i32_) -
        reinterpret_cast<char*>(&_impl_.si64_)) + sizeof(_impl_.i32_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Test2::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Test2& this_ = static_cast<const Test2&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Test2::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Test2& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:pb.Test2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 u32 = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_u32() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_u32(), target);
    }
  }

  // sint64 si64 = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_si64() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
          6, this_._internal_si64(), target);
    }
  }

  // int32 i32 = 7000;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_i32() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          7000, this_._internal_i32(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Test2)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Test2::ByteSizeLong(const MessageLite& base) {
  const Test2& this_ = static_cast<const Test2&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Test2::ByteSizeLong() const {
  const Test2& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:pb.Test2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // sint64 si64 = 6;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_si64() != 0) {
        total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
            this_._internal_si64());
      }
    }
    // uint32 u32 = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_u32() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_u32());
      }
    }
    // int32 i32 = 7000;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_i32() != 0) {
        total_size += 3 + ::_pbi::WireFormatLite::Int32Size(
                                        this_._internal_i32());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Test2::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Test2*>(&to_msg);
  auto& from = static_cast<const Test2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Test2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_si64() != 0) {
        _this->_impl_.si64_ = from._impl_.si64_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_u32() != 0) {
        _this->_impl_.u32_ = from._impl_.u32_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_i32() != 0) {
        _this->_impl_.i32_ = from._impl_.i32_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Test2::CopyFrom(const Test2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Test2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Test2::InternalSwap(Test2* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Test2, _impl_.i32_)
      + sizeof(Test2::_impl_.i32_)
      - PROTOBUF_FIELD_OFFSET(Test2, _impl_.si64_)>(
          reinterpret_cast<char*>(&_impl_.si64_),
          reinterpret_cast<char*>(&other->_impl_.si64_));
}

::google::protobuf::Metadata Test2::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Test3::_Internal {
 public:
};

Test3::Test3(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Test3_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Test3)
}
PROTOBUF_NDEBUG_INLINE Test3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::pb::Test3& from_msg)
      : vec_{visibility, arena, from.vec_},
        _vec_cached_byte_size_{0},
        _cached_size_{0} {}

Test3::Test3(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Test3& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Test3_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Test3* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:pb.Test3)
}
PROTOBUF_NDEBUG_INLINE Test3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : vec_{visibility, arena},
        _vec_cached_byte_size_{0},
        _cached_size_{0} {}

inline void Test3::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Test3::~Test3() {
  // @@protoc_insertion_point(destructor:pb.Test3)
  SharedDtor(*this);
}
inline void Test3::SharedDtor(MessageLite& self) {
  Test3& this_ = static_cast<Test3&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Test3::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Test3(arena);
}
constexpr auto Test3::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Test3, _impl_.vec_) +
          decltype(Test3::_impl_.vec_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Test3), alignof(Test3), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Test3::PlacementNew_,
                                 sizeof(Test3),
                                 alignof(Test3));
  }
}
constexpr auto Test3::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Test3_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Test3::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Test3>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Test3::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Test3>(), &Test3::ByteSizeLong,
              &Test3::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Test3, _impl_._cached_size_),
          false,
      },
      &Test3::kDescriptorMethods,
      &descriptor_table_test_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Test3_class_data_ =
            Test3::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL Test3::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Test3_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Test3_class_data_.tc_table);
  return Test3_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2>
Test3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Test3_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::pb::Test3>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated int32 vec = 1;
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Test3, _impl_.vec_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int32 vec = 1;
    {PROTOBUF_FIELD_OFFSET(Test3, _impl_.vec_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Test3::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Test3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vec_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Test3::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Test3& this_ = static_cast<const Test3&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Test3::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Test3& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:pb.Test3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int32 vec = 1;
  {
    int byte_size = this_._impl_._vec_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, this_._internal_vec(), byte_size, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Test3)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Test3::ByteSizeLong(const MessageLite& base) {
  const Test3& this_ = static_cast<const Test3&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Test3::ByteSizeLong() const {
  const Test3& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:pb.Test3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated int32 vec = 1;
    {
      total_size +=
          ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
              this_._internal_vec(), 1,
              this_._impl_._vec_cached_byte_size_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Test3::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Test3*>(&to_msg);
  auto& from = static_cast<const Test3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Test3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vec()->MergeFrom(from._internal_vec());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Test3::CopyFrom(const Test3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Test3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Test3::InternalSwap(Test3* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vec_.InternalSwap(&other->_impl_.vec_);
}

::google::protobuf::Metadata Test3::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_test_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
