// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pb {
constexpr SubTest::SubTest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : i32_(0){}
struct SubTestDefaultTypeInternal {
  constexpr SubTestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubTestDefaultTypeInternal() {}
  union {
    SubTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubTestDefaultTypeInternal _SubTest_default_instance_;
constexpr Test_MpEntry_DoNotUse::Test_MpEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Test_MpEntry_DoNotUseDefaultTypeInternal {
  constexpr Test_MpEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Test_MpEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Test_MpEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Test_MpEntry_DoNotUseDefaultTypeInternal _Test_MpEntry_DoNotUse_default_instance_;
constexpr Test::Test(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vec_()
  , _vec_cached_byte_size_(0)
  , mp_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , test_(nullptr)
  , i64_(int64_t{0})
  , i32_(0)
  , u32_(0u)
  , u64_(uint64_t{0u})
  , si64_(int64_t{0})
  , si32_(0)
  , fx32_(0u)
  , fx64_(uint64_t{0u})
  , sfx64_(int64_t{0})
  , sfx32_(0)
  , bl_(false)
  , d64_(0)
  , f32_(0)
  , _oneof_case_{}{}
struct TestDefaultTypeInternal {
  constexpr TestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestDefaultTypeInternal() {}
  union {
    Test _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestDefaultTypeInternal _Test_default_instance_;
constexpr Test2::Test2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : si64_(int64_t{0})
  , u32_(0u)
  , i32_(0){}
struct Test2DefaultTypeInternal {
  constexpr Test2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Test2DefaultTypeInternal() {}
  union {
    Test2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Test2DefaultTypeInternal _Test2_default_instance_;
constexpr Test3::Test3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vec_()
  , _vec_cached_byte_size_(0){}
struct Test3DefaultTypeInternal {
  constexpr Test3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Test3DefaultTypeInternal() {}
  union {
    Test3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Test3DefaultTypeInternal _Test3_default_instance_;
}  // namespace pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_test_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_test_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_test_2eproto = nullptr;

const uint32_t TableStruct_test_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SubTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::SubTest, i32_),
  PROTOBUF_FIELD_OFFSET(::pb::Test_MpEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::Test_MpEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Test_MpEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::Test_MpEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Test, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::Test, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Test, i32_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, i64_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, u32_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, u64_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, si32_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, si64_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, fx32_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, fx64_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, sfx32_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, sfx64_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, bl_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, f32_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, d64_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, str_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, bs_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, vec_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, mp_),
  PROTOBUF_FIELD_OFFSET(::pb::Test, test_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pb::Test, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Test2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Test2, i32_),
  PROTOBUF_FIELD_OFFSET(::pb::Test2, u32_),
  PROTOBUF_FIELD_OFFSET(::pb::Test2, si64_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Test3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Test3, vec_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb::SubTest)},
  { 7, 15, -1, sizeof(::pb::Test_MpEntry_DoNotUse)},
  { 17, -1, -1, sizeof(::pb::Test)},
  { 44, -1, -1, sizeof(::pb::Test2)},
  { 53, -1, -1, sizeof(::pb::Test3)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SubTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Test_MpEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Test_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Test2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Test3_default_instance_),
};

const char descriptor_table_protodef_test_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntest.proto\022\002pb\032\031google/protobuf/any.pr"
  "oto\"\026\n\007SubTest\022\013\n\003i32\030\001 \001(\005\"\360\002\n\004Test\022\013\n\003"
  "i32\030\001 \001(\005\022\013\n\003i64\030\002 \001(\003\022\013\n\003u32\030\003 \001(\r\022\013\n\003u"
  "64\030\004 \001(\004\022\014\n\004si32\030\005 \001(\021\022\014\n\004si64\030\006 \001(\022\022\014\n\004"
  "fx32\030\007 \001(\007\022\014\n\004fx64\030\010 \001(\006\022\r\n\005sfx32\030\t \001(\017\022"
  "\r\n\005sfx64\030\n \001(\020\022\n\n\002bl\030\013 \001(\010\022\013\n\003f32\030\014 \001(\002\022"
  "\013\n\003d64\030\r \001(\001\022\013\n\003str\030\016 \001(\t\022\n\n\002bs\030\017 \001(\014\022\013\n"
  "\003vec\030\020 \003(\005\022\034\n\002mp\030\021 \003(\0132\020.pb.Test.MpEntry"
  "\022\031\n\004test\030\022 \001(\0132\013.pb.SubTest\022\021\n\007obj_f32\030\023"
  " \001(\002H\000\022\021\n\007obj_str\030\024 \001(\tH\000\032)\n\007MpEntry\022\013\n\003"
  "key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001B\010\n\006object\"0"
  "\n\005Test2\022\014\n\003i32\030\3306 \001(\005\022\013\n\003u32\030\003 \001(\r\022\014\n\004si"
  "64\030\006 \001(\022\"\024\n\005Test3\022\013\n\003vec\030\001 \003(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_test_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_test_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto = {
  false, false, 518, descriptor_table_protodef_test_2eproto, "test.proto", 
  &descriptor_table_test_2eproto_once, descriptor_table_test_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_test_2eproto::offsets,
  file_level_metadata_test_2eproto, file_level_enum_descriptors_test_2eproto, file_level_service_descriptors_test_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_test_2eproto_getter() {
  return &descriptor_table_test_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_test_2eproto(&descriptor_table_test_2eproto);
namespace pb {

// ===================================================================

class SubTest::_Internal {
 public:
};

SubTest::SubTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.SubTest)
}
SubTest::SubTest(const SubTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i32_ = from.i32_;
  // @@protoc_insertion_point(copy_constructor:pb.SubTest)
}

inline void SubTest::SharedCtor() {
i32_ = 0;
}

SubTest::~SubTest() {
  // @@protoc_insertion_point(destructor:pb.SubTest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubTest::ArenaDtor(void* object) {
  SubTest* _this = reinterpret_cast< SubTest* >(object);
  (void)_this;
}
void SubTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubTest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SubTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i32_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 i32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          i32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SubTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 i32 = 1;
  if (this->_internal_i32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_i32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SubTest)
  return target;
}

size_t SubTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SubTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 i32 = 1;
  if (this->_internal_i32() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_i32());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubTest::GetClassData() const { return &_class_data_; }

void SubTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubTest *>(to)->MergeFrom(
      static_cast<const SubTest &>(from));
}


void SubTest::MergeFrom(const SubTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SubTest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_i32() != 0) {
    _internal_set_i32(from._internal_i32());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubTest::CopyFrom(const SubTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SubTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubTest::IsInitialized() const {
  return true;
}

void SubTest::InternalSwap(SubTest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(i32_, other->i32_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubTest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[0]);
}

// ===================================================================

Test_MpEntry_DoNotUse::Test_MpEntry_DoNotUse() {}
Test_MpEntry_DoNotUse::Test_MpEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Test_MpEntry_DoNotUse::MergeFrom(const Test_MpEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Test_MpEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[1]);
}

// ===================================================================

class Test::_Internal {
 public:
  static const ::pb::SubTest& test(const Test* msg);
};

const ::pb::SubTest&
Test::_Internal::test(const Test* msg) {
  return *msg->test_;
}
Test::Test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vec_(arena),
  mp_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.Test)
}
Test::Test(const Test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vec_(from.vec_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mp_.MergeFrom(from.mp_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str().empty()) {
    str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str(), 
      GetArenaForAllocation());
  }
  bs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bs().empty()) {
    bs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bs(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_test()) {
    test_ = new ::pb::SubTest(*from.test_);
  } else {
    test_ = nullptr;
  }
  ::memcpy(&i64_, &from.i64_,
    static_cast<size_t>(reinterpret_cast<char*>(&f32_) -
    reinterpret_cast<char*>(&i64_)) + sizeof(f32_));
  clear_has_object();
  switch (from.object_case()) {
    case kObjF32: {
      _internal_set_obj_f32(from._internal_obj_f32());
      break;
    }
    case kObjStr: {
      _internal_set_obj_str(from._internal_obj_str());
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.Test)
}

inline void Test::SharedCtor() {
str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&test_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32_) -
    reinterpret_cast<char*>(&test_)) + sizeof(f32_));
clear_has_object();
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:pb.Test)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Test::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete test_;
  if (has_object()) {
    clear_object();
  }
}

void Test::ArenaDtor(void* object) {
  Test* _this = reinterpret_cast< Test* >(object);
  (void)_this;
  _this->mp_. ~MapField();
}
inline void Test::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Test::ArenaDtor);
  }
}
void Test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Test::clear_object() {
// @@protoc_insertion_point(one_of_clear_start:pb.Test)
  switch (object_case()) {
    case kObjF32: {
      // No need to clear
      break;
    }
    case kObjStr: {
      object_.obj_str_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OBJECT_NOT_SET;
}


void Test::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Test)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_.Clear();
  mp_.Clear();
  str_.ClearToEmpty();
  bs_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
  ::memset(&i64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f32_) -
      reinterpret_cast<char*>(&i64_)) + sizeof(f32_));
  clear_object();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 i32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          i32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 i64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          i64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 u32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          u32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 u64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          u64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 si32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          si32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 si64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          si64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 fx32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          fx32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 fx64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          fx64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed32 sfx32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          sfx32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 sfx64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          sfx64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // bool bl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          bl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float f32 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          f32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double d64 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          d64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string str = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Test.str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_bs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 vec = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vec(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 128) {
          _internal_add_vec(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> mp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&mp_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .pb.SubTest test = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float obj_f32 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _internal_set_obj_f32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string obj_str = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_obj_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Test.obj_str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Test::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Test)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 i32 = 1;
  if (this->_internal_i32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_i32(), target);
  }

  // int64 i64 = 2;
  if (this->_internal_i64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_i64(), target);
  }

  // uint32 u32 = 3;
  if (this->_internal_u32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_u32(), target);
  }

  // uint64 u64 = 4;
  if (this->_internal_u64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_u64(), target);
  }

  // sint32 si32 = 5;
  if (this->_internal_si32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_si32(), target);
  }

  // sint64 si64 = 6;
  if (this->_internal_si64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_si64(), target);
  }

  // fixed32 fx32 = 7;
  if (this->_internal_fx32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_fx32(), target);
  }

  // fixed64 fx64 = 8;
  if (this->_internal_fx64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_fx64(), target);
  }

  // sfixed32 sfx32 = 9;
  if (this->_internal_sfx32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(9, this->_internal_sfx32(), target);
  }

  // sfixed64 sfx64 = 10;
  if (this->_internal_sfx64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(10, this->_internal_sfx64(), target);
  }

  // bool bl = 11;
  if (this->_internal_bl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_bl(), target);
  }

  // float f32 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f32 = this->_internal_f32();
  uint32_t raw_f32;
  memcpy(&raw_f32, &tmp_f32, sizeof(tmp_f32));
  if (raw_f32 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_f32(), target);
  }

  // double d64 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_d64 = this->_internal_d64();
  uint64_t raw_d64;
  memcpy(&raw_d64, &tmp_d64, sizeof(tmp_d64));
  if (raw_d64 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_d64(), target);
  }

  // string str = 14;
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Test.str");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_str(), target);
  }

  // bytes bs = 15;
  if (!this->_internal_bs().empty()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_bs(), target);
  }

  // repeated int32 vec = 16;
  {
    int byte_size = _vec_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          16, _internal_vec(), byte_size, target);
    }
  }

  // map<int32, int32> mp = 17;
  if (!this->_internal_mp().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mp().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mp().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
          it = this->_internal_mp().begin();
          it != this->_internal_mp().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Test_MpEntry_DoNotUse::Funcs::InternalSerialize(17, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
          it = this->_internal_mp().begin();
          it != this->_internal_mp().end(); ++it) {
        target = Test_MpEntry_DoNotUse::Funcs::InternalSerialize(17, it->first, it->second, target, stream);
      }
    }
  }

  // .pb.SubTest test = 18;
  if (this->_internal_has_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::test(this), target, stream);
  }

  // float obj_f32 = 19;
  if (_internal_has_obj_f32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_obj_f32(), target);
  }

  // string obj_str = 20;
  if (_internal_has_obj_str()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_obj_str().data(), static_cast<int>(this->_internal_obj_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Test.obj_str");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_obj_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Test)
  return target;
}

size_t Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Test)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 vec = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vec_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, int32> mp = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mp_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_mp().begin();
      it != this->_internal_mp().end(); ++it) {
    total_size += Test_MpEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string str = 14;
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // bytes bs = 15;
  if (!this->_internal_bs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bs());
  }

  // .pb.SubTest test = 18;
  if (this->_internal_has_test()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }

  // int64 i64 = 2;
  if (this->_internal_i64() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_i64());
  }

  // int32 i32 = 1;
  if (this->_internal_i32() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_i32());
  }

  // uint32 u32 = 3;
  if (this->_internal_u32() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_u32());
  }

  // uint64 u64 = 4;
  if (this->_internal_u64() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_u64());
  }

  // sint64 si64 = 6;
  if (this->_internal_si64() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_si64());
  }

  // sint32 si32 = 5;
  if (this->_internal_si32() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_si32());
  }

  // fixed32 fx32 = 7;
  if (this->_internal_fx32() != 0) {
    total_size += 1 + 4;
  }

  // fixed64 fx64 = 8;
  if (this->_internal_fx64() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 sfx64 = 10;
  if (this->_internal_sfx64() != 0) {
    total_size += 1 + 8;
  }

  // sfixed32 sfx32 = 9;
  if (this->_internal_sfx32() != 0) {
    total_size += 1 + 4;
  }

  // bool bl = 11;
  if (this->_internal_bl() != 0) {
    total_size += 1 + 1;
  }

  // double d64 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_d64 = this->_internal_d64();
  uint64_t raw_d64;
  memcpy(&raw_d64, &tmp_d64, sizeof(tmp_d64));
  if (raw_d64 != 0) {
    total_size += 1 + 8;
  }

  // float f32 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f32 = this->_internal_f32();
  uint32_t raw_f32;
  memcpy(&raw_f32, &tmp_f32, sizeof(tmp_f32));
  if (raw_f32 != 0) {
    total_size += 1 + 4;
  }

  switch (object_case()) {
    // float obj_f32 = 19;
    case kObjF32: {
      total_size += 2 + 4;
      break;
    }
    // string obj_str = 20;
    case kObjStr: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obj_str());
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Test::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Test::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Test::GetClassData() const { return &_class_data_; }

void Test::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Test *>(to)->MergeFrom(
      static_cast<const Test &>(from));
}


void Test::MergeFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Test)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vec_.MergeFrom(from.vec_);
  mp_.MergeFrom(from.mp_);
  if (!from._internal_str().empty()) {
    _internal_set_str(from._internal_str());
  }
  if (!from._internal_bs().empty()) {
    _internal_set_bs(from._internal_bs());
  }
  if (from._internal_has_test()) {
    _internal_mutable_test()->::pb::SubTest::MergeFrom(from._internal_test());
  }
  if (from._internal_i64() != 0) {
    _internal_set_i64(from._internal_i64());
  }
  if (from._internal_i32() != 0) {
    _internal_set_i32(from._internal_i32());
  }
  if (from._internal_u32() != 0) {
    _internal_set_u32(from._internal_u32());
  }
  if (from._internal_u64() != 0) {
    _internal_set_u64(from._internal_u64());
  }
  if (from._internal_si64() != 0) {
    _internal_set_si64(from._internal_si64());
  }
  if (from._internal_si32() != 0) {
    _internal_set_si32(from._internal_si32());
  }
  if (from._internal_fx32() != 0) {
    _internal_set_fx32(from._internal_fx32());
  }
  if (from._internal_fx64() != 0) {
    _internal_set_fx64(from._internal_fx64());
  }
  if (from._internal_sfx64() != 0) {
    _internal_set_sfx64(from._internal_sfx64());
  }
  if (from._internal_sfx32() != 0) {
    _internal_set_sfx32(from._internal_sfx32());
  }
  if (from._internal_bl() != 0) {
    _internal_set_bl(from._internal_bl());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_d64 = from._internal_d64();
  uint64_t raw_d64;
  memcpy(&raw_d64, &tmp_d64, sizeof(tmp_d64));
  if (raw_d64 != 0) {
    _internal_set_d64(from._internal_d64());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f32 = from._internal_f32();
  uint32_t raw_f32;
  memcpy(&raw_f32, &tmp_f32, sizeof(tmp_f32));
  if (raw_f32 != 0) {
    _internal_set_f32(from._internal_f32());
  }
  switch (from.object_case()) {
    case kObjF32: {
      _internal_set_obj_f32(from._internal_obj_f32());
      break;
    }
    case kObjStr: {
      _internal_set_obj_str(from._internal_obj_str());
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Test::CopyFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  return true;
}

void Test::InternalSwap(Test* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vec_.InternalSwap(&other->vec_);
  mp_.InternalSwap(&other->mp_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bs_, lhs_arena,
      &other->bs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Test, f32_)
      + sizeof(Test::f32_)
      - PROTOBUF_FIELD_OFFSET(Test, test_)>(
          reinterpret_cast<char*>(&test_),
          reinterpret_cast<char*>(&other->test_));
  swap(object_, other->object_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Test::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[2]);
}

// ===================================================================

class Test2::_Internal {
 public:
};

Test2::Test2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.Test2)
}
Test2::Test2(const Test2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&si64_, &from.si64_,
    static_cast<size_t>(reinterpret_cast<char*>(&i32_) -
    reinterpret_cast<char*>(&si64_)) + sizeof(i32_));
  // @@protoc_insertion_point(copy_constructor:pb.Test2)
}

inline void Test2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&si64_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&i32_) -
    reinterpret_cast<char*>(&si64_)) + sizeof(i32_));
}

Test2::~Test2() {
  // @@protoc_insertion_point(destructor:pb.Test2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Test2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Test2::ArenaDtor(void* object) {
  Test2* _this = reinterpret_cast< Test2* >(object);
  (void)_this;
}
void Test2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Test2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Test2::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Test2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&si64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&i32_) -
      reinterpret_cast<char*>(&si64_)) + sizeof(i32_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 u32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          u32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 si64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          si64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 i32 = 7000;
      case 7000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          i32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Test2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Test2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 u32 = 3;
  if (this->_internal_u32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_u32(), target);
  }

  // sint64 si64 = 6;
  if (this->_internal_si64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_si64(), target);
  }

  // int32 i32 = 7000;
  if (this->_internal_i32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7000, this->_internal_i32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Test2)
  return target;
}

size_t Test2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Test2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 si64 = 6;
  if (this->_internal_si64() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_si64());
  }

  // uint32 u32 = 3;
  if (this->_internal_u32() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_u32());
  }

  // int32 i32 = 7000;
  if (this->_internal_i32() != 0) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_i32());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Test2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Test2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Test2::GetClassData() const { return &_class_data_; }

void Test2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Test2 *>(to)->MergeFrom(
      static_cast<const Test2 &>(from));
}


void Test2::MergeFrom(const Test2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Test2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_si64() != 0) {
    _internal_set_si64(from._internal_si64());
  }
  if (from._internal_u32() != 0) {
    _internal_set_u32(from._internal_u32());
  }
  if (from._internal_i32() != 0) {
    _internal_set_i32(from._internal_i32());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Test2::CopyFrom(const Test2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Test2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test2::IsInitialized() const {
  return true;
}

void Test2::InternalSwap(Test2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Test2, i32_)
      + sizeof(Test2::i32_)
      - PROTOBUF_FIELD_OFFSET(Test2, si64_)>(
          reinterpret_cast<char*>(&si64_),
          reinterpret_cast<char*>(&other->si64_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Test2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[3]);
}

// ===================================================================

class Test3::_Internal {
 public:
};

Test3::Test3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vec_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.Test3)
}
Test3::Test3(const Test3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vec_(from.vec_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.Test3)
}

inline void Test3::SharedCtor() {
}

Test3::~Test3() {
  // @@protoc_insertion_point(destructor:pb.Test3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Test3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Test3::ArenaDtor(void* object) {
  Test3* _this = reinterpret_cast< Test3* >(object);
  (void)_this;
}
void Test3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Test3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Test3::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Test3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 vec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vec(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_vec(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Test3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Test3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 vec = 1;
  {
    int byte_size = _vec_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_vec(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Test3)
  return target;
}

size_t Test3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Test3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 vec = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vec_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Test3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Test3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Test3::GetClassData() const { return &_class_data_; }

void Test3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Test3 *>(to)->MergeFrom(
      static_cast<const Test3 &>(from));
}


void Test3::MergeFrom(const Test3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Test3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vec_.MergeFrom(from.vec_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Test3::CopyFrom(const Test3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Test3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test3::IsInitialized() const {
  return true;
}

void Test3::InternalSwap(Test3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vec_.InternalSwap(&other->vec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Test3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::SubTest* Arena::CreateMaybeMessage< ::pb::SubTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SubTest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Test_MpEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::Test_MpEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Test_MpEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Test* Arena::CreateMaybeMessage< ::pb::Test >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Test >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Test2* Arena::CreateMaybeMessage< ::pb::Test2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Test2 >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Test3* Arena::CreateMaybeMessage< ::pb::Test3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Test3 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
