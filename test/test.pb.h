// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace pb {
class SubTest;
struct SubTestDefaultTypeInternal;
extern SubTestDefaultTypeInternal _SubTest_default_instance_;
class Test;
struct TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
class Test2;
struct Test2DefaultTypeInternal;
extern Test2DefaultTypeInternal _Test2_default_instance_;
class Test3;
struct Test3DefaultTypeInternal;
extern Test3DefaultTypeInternal _Test3_default_instance_;
class Test_MpEntry_DoNotUse;
struct Test_MpEntry_DoNotUseDefaultTypeInternal;
extern Test_MpEntry_DoNotUseDefaultTypeInternal _Test_MpEntry_DoNotUse_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::SubTest* Arena::CreateMaybeMessage<::pb::SubTest>(Arena*);
template<> ::pb::Test* Arena::CreateMaybeMessage<::pb::Test>(Arena*);
template<> ::pb::Test2* Arena::CreateMaybeMessage<::pb::Test2>(Arena*);
template<> ::pb::Test3* Arena::CreateMaybeMessage<::pb::Test3>(Arena*);
template<> ::pb::Test_MpEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::Test_MpEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class SubTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SubTest) */ {
 public:
  inline SubTest() : SubTest(nullptr) {}
  ~SubTest() override;
  explicit constexpr SubTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubTest(const SubTest& from);
  SubTest(SubTest&& from) noexcept
    : SubTest() {
    *this = ::std::move(from);
  }

  inline SubTest& operator=(const SubTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubTest& operator=(SubTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubTest* internal_default_instance() {
    return reinterpret_cast<const SubTest*>(
               &_SubTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubTest& a, SubTest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubTest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SubTest";
  }
  protected:
  explicit SubTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kI32FieldNumber = 1,
  };
  // int32 i32 = 1;
  void clear_i32();
  int32_t i32() const;
  void set_i32(int32_t value);
  private:
  int32_t _internal_i32() const;
  void _internal_set_i32(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SubTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t i32_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Test_MpEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Test_MpEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Test_MpEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  Test_MpEntry_DoNotUse();
  explicit constexpr Test_MpEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Test_MpEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Test_MpEntry_DoNotUse& other);
  static const Test_MpEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Test_MpEntry_DoNotUse*>(&_Test_MpEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Test final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Test) */ {
 public:
  inline Test() : Test(nullptr) {}
  ~Test() override;
  explicit constexpr Test(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Test(const Test& from);
  Test(Test&& from) noexcept
    : Test() {
    *this = ::std::move(from);
  }

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test& operator=(Test&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Test& default_instance() {
    return *internal_default_instance();
  }
  enum ObjectCase {
    kObjF32 = 19,
    kObjStr = 20,
    OBJECT_NOT_SET = 0,
  };

  static inline const Test* internal_default_instance() {
    return reinterpret_cast<const Test*>(
               &_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Test& a, Test& b) {
    a.Swap(&b);
  }
  inline void Swap(Test* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Test>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Test& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Test& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Test";
  }
  protected:
  explicit Test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldNumber = 16,
    kMpFieldNumber = 17,
    kStrFieldNumber = 14,
    kBsFieldNumber = 15,
    kTestFieldNumber = 18,
    kI64FieldNumber = 2,
    kI32FieldNumber = 1,
    kU32FieldNumber = 3,
    kU64FieldNumber = 4,
    kSi64FieldNumber = 6,
    kSi32FieldNumber = 5,
    kFx32FieldNumber = 7,
    kFx64FieldNumber = 8,
    kSfx64FieldNumber = 10,
    kSfx32FieldNumber = 9,
    kBlFieldNumber = 11,
    kD64FieldNumber = 13,
    kF32FieldNumber = 12,
    kObjF32FieldNumber = 19,
    kObjStrFieldNumber = 20,
  };
  // repeated int32 vec = 16;
  int vec_size() const;
  private:
  int _internal_vec_size() const;
  public:
  void clear_vec();
  private:
  int32_t _internal_vec(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_vec() const;
  void _internal_add_vec(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_vec();
  public:
  int32_t vec(int index) const;
  void set_vec(int index, int32_t value);
  void add_vec(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      vec() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_vec();

  // map<int32, int32> mp = 17;
  int mp_size() const;
  private:
  int _internal_mp_size() const;
  public:
  void clear_mp();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      _internal_mp() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      _internal_mutable_mp();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      mp() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      mutable_mp();

  // string str = 14;
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // bytes bs = 15;
  void clear_bs();
  const std::string& bs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bs();
  PROTOBUF_NODISCARD std::string* release_bs();
  void set_allocated_bs(std::string* bs);
  private:
  const std::string& _internal_bs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bs(const std::string& value);
  std::string* _internal_mutable_bs();
  public:

  // .pb.SubTest test = 18;
  bool has_test() const;
  private:
  bool _internal_has_test() const;
  public:
  void clear_test();
  const ::pb::SubTest& test() const;
  PROTOBUF_NODISCARD ::pb::SubTest* release_test();
  ::pb::SubTest* mutable_test();
  void set_allocated_test(::pb::SubTest* test);
  private:
  const ::pb::SubTest& _internal_test() const;
  ::pb::SubTest* _internal_mutable_test();
  public:
  void unsafe_arena_set_allocated_test(
      ::pb::SubTest* test);
  ::pb::SubTest* unsafe_arena_release_test();

  // int64 i64 = 2;
  void clear_i64();
  int64_t i64() const;
  void set_i64(int64_t value);
  private:
  int64_t _internal_i64() const;
  void _internal_set_i64(int64_t value);
  public:

  // int32 i32 = 1;
  void clear_i32();
  int32_t i32() const;
  void set_i32(int32_t value);
  private:
  int32_t _internal_i32() const;
  void _internal_set_i32(int32_t value);
  public:

  // uint32 u32 = 3;
  void clear_u32();
  uint32_t u32() const;
  void set_u32(uint32_t value);
  private:
  uint32_t _internal_u32() const;
  void _internal_set_u32(uint32_t value);
  public:

  // uint64 u64 = 4;
  void clear_u64();
  uint64_t u64() const;
  void set_u64(uint64_t value);
  private:
  uint64_t _internal_u64() const;
  void _internal_set_u64(uint64_t value);
  public:

  // sint64 si64 = 6;
  void clear_si64();
  int64_t si64() const;
  void set_si64(int64_t value);
  private:
  int64_t _internal_si64() const;
  void _internal_set_si64(int64_t value);
  public:

  // sint32 si32 = 5;
  void clear_si32();
  int32_t si32() const;
  void set_si32(int32_t value);
  private:
  int32_t _internal_si32() const;
  void _internal_set_si32(int32_t value);
  public:

  // fixed32 fx32 = 7;
  void clear_fx32();
  uint32_t fx32() const;
  void set_fx32(uint32_t value);
  private:
  uint32_t _internal_fx32() const;
  void _internal_set_fx32(uint32_t value);
  public:

  // fixed64 fx64 = 8;
  void clear_fx64();
  uint64_t fx64() const;
  void set_fx64(uint64_t value);
  private:
  uint64_t _internal_fx64() const;
  void _internal_set_fx64(uint64_t value);
  public:

  // sfixed64 sfx64 = 10;
  void clear_sfx64();
  int64_t sfx64() const;
  void set_sfx64(int64_t value);
  private:
  int64_t _internal_sfx64() const;
  void _internal_set_sfx64(int64_t value);
  public:

  // sfixed32 sfx32 = 9;
  void clear_sfx32();
  int32_t sfx32() const;
  void set_sfx32(int32_t value);
  private:
  int32_t _internal_sfx32() const;
  void _internal_set_sfx32(int32_t value);
  public:

  // bool bl = 11;
  void clear_bl();
  bool bl() const;
  void set_bl(bool value);
  private:
  bool _internal_bl() const;
  void _internal_set_bl(bool value);
  public:

  // double d64 = 13;
  void clear_d64();
  double d64() const;
  void set_d64(double value);
  private:
  double _internal_d64() const;
  void _internal_set_d64(double value);
  public:

  // float f32 = 12;
  void clear_f32();
  float f32() const;
  void set_f32(float value);
  private:
  float _internal_f32() const;
  void _internal_set_f32(float value);
  public:

  // float obj_f32 = 19;
  bool has_obj_f32() const;
  private:
  bool _internal_has_obj_f32() const;
  public:
  void clear_obj_f32();
  float obj_f32() const;
  void set_obj_f32(float value);
  private:
  float _internal_obj_f32() const;
  void _internal_set_obj_f32(float value);
  public:

  // string obj_str = 20;
  bool has_obj_str() const;
  private:
  bool _internal_has_obj_str() const;
  public:
  void clear_obj_str();
  const std::string& obj_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_obj_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_obj_str();
  PROTOBUF_NODISCARD std::string* release_obj_str();
  void set_allocated_obj_str(std::string* obj_str);
  private:
  const std::string& _internal_obj_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obj_str(const std::string& value);
  std::string* _internal_mutable_obj_str();
  public:

  void clear_object();
  ObjectCase object_case() const;
  // @@protoc_insertion_point(class_scope:pb.Test)
 private:
  class _Internal;
  void set_has_obj_f32();
  void set_has_obj_str();

  inline bool has_object() const;
  inline void clear_has_object();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > vec_;
  mutable std::atomic<int> _vec_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Test_MpEntry_DoNotUse,
      int32_t, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> mp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bs_;
  ::pb::SubTest* test_;
  int64_t i64_;
  int32_t i32_;
  uint32_t u32_;
  uint64_t u64_;
  int64_t si64_;
  int32_t si32_;
  uint32_t fx32_;
  uint64_t fx64_;
  int64_t sfx64_;
  int32_t sfx32_;
  bool bl_;
  double d64_;
  float f32_;
  union ObjectUnion {
    constexpr ObjectUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    float obj_f32_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_str_;
  } object_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Test2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Test2) */ {
 public:
  inline Test2() : Test2(nullptr) {}
  ~Test2() override;
  explicit constexpr Test2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Test2(const Test2& from);
  Test2(Test2&& from) noexcept
    : Test2() {
    *this = ::std::move(from);
  }

  inline Test2& operator=(const Test2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test2& operator=(Test2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Test2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Test2* internal_default_instance() {
    return reinterpret_cast<const Test2*>(
               &_Test2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Test2& a, Test2& b) {
    a.Swap(&b);
  }
  inline void Swap(Test2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Test2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Test2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Test2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Test2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Test2";
  }
  protected:
  explicit Test2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSi64FieldNumber = 6,
    kU32FieldNumber = 3,
    kI32FieldNumber = 7000,
  };
  // sint64 si64 = 6;
  void clear_si64();
  int64_t si64() const;
  void set_si64(int64_t value);
  private:
  int64_t _internal_si64() const;
  void _internal_set_si64(int64_t value);
  public:

  // uint32 u32 = 3;
  void clear_u32();
  uint32_t u32() const;
  void set_u32(uint32_t value);
  private:
  uint32_t _internal_u32() const;
  void _internal_set_u32(uint32_t value);
  public:

  // int32 i32 = 7000;
  void clear_i32();
  int32_t i32() const;
  void set_i32(int32_t value);
  private:
  int32_t _internal_i32() const;
  void _internal_set_i32(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Test2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t si64_;
  uint32_t u32_;
  int32_t i32_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Test3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Test3) */ {
 public:
  inline Test3() : Test3(nullptr) {}
  ~Test3() override;
  explicit constexpr Test3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Test3(const Test3& from);
  Test3(Test3&& from) noexcept
    : Test3() {
    *this = ::std::move(from);
  }

  inline Test3& operator=(const Test3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test3& operator=(Test3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Test3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Test3* internal_default_instance() {
    return reinterpret_cast<const Test3*>(
               &_Test3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Test3& a, Test3& b) {
    a.Swap(&b);
  }
  inline void Swap(Test3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Test3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Test3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Test3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Test3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Test3";
  }
  protected:
  explicit Test3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldNumber = 1,
  };
  // repeated int32 vec = 1;
  int vec_size() const;
  private:
  int _internal_vec_size() const;
  public:
  void clear_vec();
  private:
  int32_t _internal_vec(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_vec() const;
  void _internal_add_vec(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_vec();
  public:
  int32_t vec(int index) const;
  void set_vec(int index, int32_t value);
  void add_vec(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      vec() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_vec();

  // @@protoc_insertion_point(class_scope:pb.Test3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > vec_;
  mutable std::atomic<int> _vec_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubTest

// int32 i32 = 1;
inline void SubTest::clear_i32() {
  i32_ = 0;
}
inline int32_t SubTest::_internal_i32() const {
  return i32_;
}
inline int32_t SubTest::i32() const {
  // @@protoc_insertion_point(field_get:pb.SubTest.i32)
  return _internal_i32();
}
inline void SubTest::_internal_set_i32(int32_t value) {
  
  i32_ = value;
}
inline void SubTest::set_i32(int32_t value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:pb.SubTest.i32)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Test

// int32 i32 = 1;
inline void Test::clear_i32() {
  i32_ = 0;
}
inline int32_t Test::_internal_i32() const {
  return i32_;
}
inline int32_t Test::i32() const {
  // @@protoc_insertion_point(field_get:pb.Test.i32)
  return _internal_i32();
}
inline void Test::_internal_set_i32(int32_t value) {
  
  i32_ = value;
}
inline void Test::set_i32(int32_t value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:pb.Test.i32)
}

// int64 i64 = 2;
inline void Test::clear_i64() {
  i64_ = int64_t{0};
}
inline int64_t Test::_internal_i64() const {
  return i64_;
}
inline int64_t Test::i64() const {
  // @@protoc_insertion_point(field_get:pb.Test.i64)
  return _internal_i64();
}
inline void Test::_internal_set_i64(int64_t value) {
  
  i64_ = value;
}
inline void Test::set_i64(int64_t value) {
  _internal_set_i64(value);
  // @@protoc_insertion_point(field_set:pb.Test.i64)
}

// uint32 u32 = 3;
inline void Test::clear_u32() {
  u32_ = 0u;
}
inline uint32_t Test::_internal_u32() const {
  return u32_;
}
inline uint32_t Test::u32() const {
  // @@protoc_insertion_point(field_get:pb.Test.u32)
  return _internal_u32();
}
inline void Test::_internal_set_u32(uint32_t value) {
  
  u32_ = value;
}
inline void Test::set_u32(uint32_t value) {
  _internal_set_u32(value);
  // @@protoc_insertion_point(field_set:pb.Test.u32)
}

// uint64 u64 = 4;
inline void Test::clear_u64() {
  u64_ = uint64_t{0u};
}
inline uint64_t Test::_internal_u64() const {
  return u64_;
}
inline uint64_t Test::u64() const {
  // @@protoc_insertion_point(field_get:pb.Test.u64)
  return _internal_u64();
}
inline void Test::_internal_set_u64(uint64_t value) {
  
  u64_ = value;
}
inline void Test::set_u64(uint64_t value) {
  _internal_set_u64(value);
  // @@protoc_insertion_point(field_set:pb.Test.u64)
}

// sint32 si32 = 5;
inline void Test::clear_si32() {
  si32_ = 0;
}
inline int32_t Test::_internal_si32() const {
  return si32_;
}
inline int32_t Test::si32() const {
  // @@protoc_insertion_point(field_get:pb.Test.si32)
  return _internal_si32();
}
inline void Test::_internal_set_si32(int32_t value) {
  
  si32_ = value;
}
inline void Test::set_si32(int32_t value) {
  _internal_set_si32(value);
  // @@protoc_insertion_point(field_set:pb.Test.si32)
}

// sint64 si64 = 6;
inline void Test::clear_si64() {
  si64_ = int64_t{0};
}
inline int64_t Test::_internal_si64() const {
  return si64_;
}
inline int64_t Test::si64() const {
  // @@protoc_insertion_point(field_get:pb.Test.si64)
  return _internal_si64();
}
inline void Test::_internal_set_si64(int64_t value) {
  
  si64_ = value;
}
inline void Test::set_si64(int64_t value) {
  _internal_set_si64(value);
  // @@protoc_insertion_point(field_set:pb.Test.si64)
}

// fixed32 fx32 = 7;
inline void Test::clear_fx32() {
  fx32_ = 0u;
}
inline uint32_t Test::_internal_fx32() const {
  return fx32_;
}
inline uint32_t Test::fx32() const {
  // @@protoc_insertion_point(field_get:pb.Test.fx32)
  return _internal_fx32();
}
inline void Test::_internal_set_fx32(uint32_t value) {
  
  fx32_ = value;
}
inline void Test::set_fx32(uint32_t value) {
  _internal_set_fx32(value);
  // @@protoc_insertion_point(field_set:pb.Test.fx32)
}

// fixed64 fx64 = 8;
inline void Test::clear_fx64() {
  fx64_ = uint64_t{0u};
}
inline uint64_t Test::_internal_fx64() const {
  return fx64_;
}
inline uint64_t Test::fx64() const {
  // @@protoc_insertion_point(field_get:pb.Test.fx64)
  return _internal_fx64();
}
inline void Test::_internal_set_fx64(uint64_t value) {
  
  fx64_ = value;
}
inline void Test::set_fx64(uint64_t value) {
  _internal_set_fx64(value);
  // @@protoc_insertion_point(field_set:pb.Test.fx64)
}

// sfixed32 sfx32 = 9;
inline void Test::clear_sfx32() {
  sfx32_ = 0;
}
inline int32_t Test::_internal_sfx32() const {
  return sfx32_;
}
inline int32_t Test::sfx32() const {
  // @@protoc_insertion_point(field_get:pb.Test.sfx32)
  return _internal_sfx32();
}
inline void Test::_internal_set_sfx32(int32_t value) {
  
  sfx32_ = value;
}
inline void Test::set_sfx32(int32_t value) {
  _internal_set_sfx32(value);
  // @@protoc_insertion_point(field_set:pb.Test.sfx32)
}

// sfixed64 sfx64 = 10;
inline void Test::clear_sfx64() {
  sfx64_ = int64_t{0};
}
inline int64_t Test::_internal_sfx64() const {
  return sfx64_;
}
inline int64_t Test::sfx64() const {
  // @@protoc_insertion_point(field_get:pb.Test.sfx64)
  return _internal_sfx64();
}
inline void Test::_internal_set_sfx64(int64_t value) {
  
  sfx64_ = value;
}
inline void Test::set_sfx64(int64_t value) {
  _internal_set_sfx64(value);
  // @@protoc_insertion_point(field_set:pb.Test.sfx64)
}

// bool bl = 11;
inline void Test::clear_bl() {
  bl_ = false;
}
inline bool Test::_internal_bl() const {
  return bl_;
}
inline bool Test::bl() const {
  // @@protoc_insertion_point(field_get:pb.Test.bl)
  return _internal_bl();
}
inline void Test::_internal_set_bl(bool value) {
  
  bl_ = value;
}
inline void Test::set_bl(bool value) {
  _internal_set_bl(value);
  // @@protoc_insertion_point(field_set:pb.Test.bl)
}

// float f32 = 12;
inline void Test::clear_f32() {
  f32_ = 0;
}
inline float Test::_internal_f32() const {
  return f32_;
}
inline float Test::f32() const {
  // @@protoc_insertion_point(field_get:pb.Test.f32)
  return _internal_f32();
}
inline void Test::_internal_set_f32(float value) {
  
  f32_ = value;
}
inline void Test::set_f32(float value) {
  _internal_set_f32(value);
  // @@protoc_insertion_point(field_set:pb.Test.f32)
}

// double d64 = 13;
inline void Test::clear_d64() {
  d64_ = 0;
}
inline double Test::_internal_d64() const {
  return d64_;
}
inline double Test::d64() const {
  // @@protoc_insertion_point(field_get:pb.Test.d64)
  return _internal_d64();
}
inline void Test::_internal_set_d64(double value) {
  
  d64_ = value;
}
inline void Test::set_d64(double value) {
  _internal_set_d64(value);
  // @@protoc_insertion_point(field_set:pb.Test.d64)
}

// string str = 14;
inline void Test::clear_str() {
  str_.ClearToEmpty();
}
inline const std::string& Test::str() const {
  // @@protoc_insertion_point(field_get:pb.Test.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Test::set_str(ArgT0&& arg0, ArgT... args) {
 
 str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Test.str)
}
inline std::string* Test::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:pb.Test.str)
  return _s;
}
inline const std::string& Test::_internal_str() const {
  return str_.Get();
}
inline void Test::_internal_set_str(const std::string& value) {
  
  str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Test::_internal_mutable_str() {
  
  return str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Test::release_str() {
  // @@protoc_insertion_point(field_release:pb.Test.str)
  return str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Test::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Test.str)
}

// bytes bs = 15;
inline void Test::clear_bs() {
  bs_.ClearToEmpty();
}
inline const std::string& Test::bs() const {
  // @@protoc_insertion_point(field_get:pb.Test.bs)
  return _internal_bs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Test::set_bs(ArgT0&& arg0, ArgT... args) {
 
 bs_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Test.bs)
}
inline std::string* Test::mutable_bs() {
  std::string* _s = _internal_mutable_bs();
  // @@protoc_insertion_point(field_mutable:pb.Test.bs)
  return _s;
}
inline const std::string& Test::_internal_bs() const {
  return bs_.Get();
}
inline void Test::_internal_set_bs(const std::string& value) {
  
  bs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Test::_internal_mutable_bs() {
  
  return bs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Test::release_bs() {
  // @@protoc_insertion_point(field_release:pb.Test.bs)
  return bs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Test::set_allocated_bs(std::string* bs) {
  if (bs != nullptr) {
    
  } else {
    
  }
  bs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bs,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bs_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Test.bs)
}

// repeated int32 vec = 16;
inline int Test::_internal_vec_size() const {
  return vec_.size();
}
inline int Test::vec_size() const {
  return _internal_vec_size();
}
inline void Test::clear_vec() {
  vec_.Clear();
}
inline int32_t Test::_internal_vec(int index) const {
  return vec_.Get(index);
}
inline int32_t Test::vec(int index) const {
  // @@protoc_insertion_point(field_get:pb.Test.vec)
  return _internal_vec(index);
}
inline void Test::set_vec(int index, int32_t value) {
  vec_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.Test.vec)
}
inline void Test::_internal_add_vec(int32_t value) {
  vec_.Add(value);
}
inline void Test::add_vec(int32_t value) {
  _internal_add_vec(value);
  // @@protoc_insertion_point(field_add:pb.Test.vec)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Test::_internal_vec() const {
  return vec_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Test::vec() const {
  // @@protoc_insertion_point(field_list:pb.Test.vec)
  return _internal_vec();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Test::_internal_mutable_vec() {
  return &vec_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Test::mutable_vec() {
  // @@protoc_insertion_point(field_mutable_list:pb.Test.vec)
  return _internal_mutable_vec();
}

// map<int32, int32> mp = 17;
inline int Test::_internal_mp_size() const {
  return mp_.size();
}
inline int Test::mp_size() const {
  return _internal_mp_size();
}
inline void Test::clear_mp() {
  mp_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
Test::_internal_mp() const {
  return mp_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
Test::mp() const {
  // @@protoc_insertion_point(field_map:pb.Test.mp)
  return _internal_mp();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
Test::_internal_mutable_mp() {
  return mp_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
Test::mutable_mp() {
  // @@protoc_insertion_point(field_mutable_map:pb.Test.mp)
  return _internal_mutable_mp();
}

// .pb.SubTest test = 18;
inline bool Test::_internal_has_test() const {
  return this != internal_default_instance() && test_ != nullptr;
}
inline bool Test::has_test() const {
  return _internal_has_test();
}
inline void Test::clear_test() {
  if (GetArenaForAllocation() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
}
inline const ::pb::SubTest& Test::_internal_test() const {
  const ::pb::SubTest* p = test_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::SubTest&>(
      ::pb::_SubTest_default_instance_);
}
inline const ::pb::SubTest& Test::test() const {
  // @@protoc_insertion_point(field_get:pb.Test.test)
  return _internal_test();
}
inline void Test::unsafe_arena_set_allocated_test(
    ::pb::SubTest* test) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_);
  }
  test_ = test;
  if (test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Test.test)
}
inline ::pb::SubTest* Test::release_test() {
  
  ::pb::SubTest* temp = test_;
  test_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::SubTest* Test::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_release:pb.Test.test)
  
  ::pb::SubTest* temp = test_;
  test_ = nullptr;
  return temp;
}
inline ::pb::SubTest* Test::_internal_mutable_test() {
  
  if (test_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SubTest>(GetArenaForAllocation());
    test_ = p;
  }
  return test_;
}
inline ::pb::SubTest* Test::mutable_test() {
  ::pb::SubTest* _msg = _internal_mutable_test();
  // @@protoc_insertion_point(field_mutable:pb.Test.test)
  return _msg;
}
inline void Test::set_allocated_test(::pb::SubTest* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete test_;
  }
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pb::SubTest>::GetOwningArena(test);
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    
  } else {
    
  }
  test_ = test;
  // @@protoc_insertion_point(field_set_allocated:pb.Test.test)
}

// float obj_f32 = 19;
inline bool Test::_internal_has_obj_f32() const {
  return object_case() == kObjF32;
}
inline bool Test::has_obj_f32() const {
  return _internal_has_obj_f32();
}
inline void Test::set_has_obj_f32() {
  _oneof_case_[0] = kObjF32;
}
inline void Test::clear_obj_f32() {
  if (_internal_has_obj_f32()) {
    object_.obj_f32_ = 0;
    clear_has_object();
  }
}
inline float Test::_internal_obj_f32() const {
  if (_internal_has_obj_f32()) {
    return object_.obj_f32_;
  }
  return 0;
}
inline void Test::_internal_set_obj_f32(float value) {
  if (!_internal_has_obj_f32()) {
    clear_object();
    set_has_obj_f32();
  }
  object_.obj_f32_ = value;
}
inline float Test::obj_f32() const {
  // @@protoc_insertion_point(field_get:pb.Test.obj_f32)
  return _internal_obj_f32();
}
inline void Test::set_obj_f32(float value) {
  _internal_set_obj_f32(value);
  // @@protoc_insertion_point(field_set:pb.Test.obj_f32)
}

// string obj_str = 20;
inline bool Test::_internal_has_obj_str() const {
  return object_case() == kObjStr;
}
inline bool Test::has_obj_str() const {
  return _internal_has_obj_str();
}
inline void Test::set_has_obj_str() {
  _oneof_case_[0] = kObjStr;
}
inline void Test::clear_obj_str() {
  if (_internal_has_obj_str()) {
    object_.obj_str_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_object();
  }
}
inline const std::string& Test::obj_str() const {
  // @@protoc_insertion_point(field_get:pb.Test.obj_str)
  return _internal_obj_str();
}
template <typename ArgT0, typename... ArgT>
inline void Test::set_obj_str(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_obj_str()) {
    clear_object();
    set_has_obj_str();
    object_.obj_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  object_.obj_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Test.obj_str)
}
inline std::string* Test::mutable_obj_str() {
  std::string* _s = _internal_mutable_obj_str();
  // @@protoc_insertion_point(field_mutable:pb.Test.obj_str)
  return _s;
}
inline const std::string& Test::_internal_obj_str() const {
  if (_internal_has_obj_str()) {
    return object_.obj_str_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Test::_internal_set_obj_str(const std::string& value) {
  if (!_internal_has_obj_str()) {
    clear_object();
    set_has_obj_str();
    object_.obj_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  object_.obj_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Test::_internal_mutable_obj_str() {
  if (!_internal_has_obj_str()) {
    clear_object();
    set_has_obj_str();
    object_.obj_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return object_.obj_str_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Test::release_obj_str() {
  // @@protoc_insertion_point(field_release:pb.Test.obj_str)
  if (_internal_has_obj_str()) {
    clear_has_object();
    return object_.obj_str_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Test::set_allocated_obj_str(std::string* obj_str) {
  if (has_object()) {
    clear_object();
  }
  if (obj_str != nullptr) {
    set_has_obj_str();
    object_.obj_str_.UnsafeSetDefault(obj_str);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(obj_str);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Test.obj_str)
}

inline bool Test::has_object() const {
  return object_case() != OBJECT_NOT_SET;
}
inline void Test::clear_has_object() {
  _oneof_case_[0] = OBJECT_NOT_SET;
}
inline Test::ObjectCase Test::object_case() const {
  return Test::ObjectCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Test2

// int32 i32 = 7000;
inline void Test2::clear_i32() {
  i32_ = 0;
}
inline int32_t Test2::_internal_i32() const {
  return i32_;
}
inline int32_t Test2::i32() const {
  // @@protoc_insertion_point(field_get:pb.Test2.i32)
  return _internal_i32();
}
inline void Test2::_internal_set_i32(int32_t value) {
  
  i32_ = value;
}
inline void Test2::set_i32(int32_t value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:pb.Test2.i32)
}

// uint32 u32 = 3;
inline void Test2::clear_u32() {
  u32_ = 0u;
}
inline uint32_t Test2::_internal_u32() const {
  return u32_;
}
inline uint32_t Test2::u32() const {
  // @@protoc_insertion_point(field_get:pb.Test2.u32)
  return _internal_u32();
}
inline void Test2::_internal_set_u32(uint32_t value) {
  
  u32_ = value;
}
inline void Test2::set_u32(uint32_t value) {
  _internal_set_u32(value);
  // @@protoc_insertion_point(field_set:pb.Test2.u32)
}

// sint64 si64 = 6;
inline void Test2::clear_si64() {
  si64_ = int64_t{0};
}
inline int64_t Test2::_internal_si64() const {
  return si64_;
}
inline int64_t Test2::si64() const {
  // @@protoc_insertion_point(field_get:pb.Test2.si64)
  return _internal_si64();
}
inline void Test2::_internal_set_si64(int64_t value) {
  
  si64_ = value;
}
inline void Test2::set_si64(int64_t value) {
  _internal_set_si64(value);
  // @@protoc_insertion_point(field_set:pb.Test2.si64)
}

// -------------------------------------------------------------------

// Test3

// repeated int32 vec = 1;
inline int Test3::_internal_vec_size() const {
  return vec_.size();
}
inline int Test3::vec_size() const {
  return _internal_vec_size();
}
inline void Test3::clear_vec() {
  vec_.Clear();
}
inline int32_t Test3::_internal_vec(int index) const {
  return vec_.Get(index);
}
inline int32_t Test3::vec(int index) const {
  // @@protoc_insertion_point(field_get:pb.Test3.vec)
  return _internal_vec(index);
}
inline void Test3::set_vec(int index, int32_t value) {
  vec_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.Test3.vec)
}
inline void Test3::_internal_add_vec(int32_t value) {
  vec_.Add(value);
}
inline void Test3::add_vec(int32_t value) {
  _internal_add_vec(value);
  // @@protoc_insertion_point(field_add:pb.Test3.vec)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Test3::_internal_vec() const {
  return vec_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Test3::vec() const {
  // @@protoc_insertion_point(field_list:pb.Test3.vec)
  return _internal_vec();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Test3::_internal_mutable_vec() {
  return &vec_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Test3::mutable_vec() {
  // @@protoc_insertion_point(field_mutable_list:pb.Test3.vec)
  return _internal_mutable_vec();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
